<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log into that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/MU" created="2009-01-15 16:41"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Colin Eberhardt's Adventures in WPF</title>
	<link>http://wpfadventures.wordpress.com</link>
	<description></description>
	<pubDate>Thu, 15 Jan 2009 13:57:22 +0000</pubDate>
	<generator>http://wordpress.org/?v=MU</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://wpfadventures.wordpress.com</wp:base_blog_url>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:tag_slug>awards</wp:tag_slug><wp:tag_name><![CDATA[Awards]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>datagrid</wp:tag_slug><wp:tag_name><![CDATA[DataGrid]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ieditableobject</wp:tag_slug><wp:tag_name><![CDATA[IEditableObject]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>introduction</wp:tag_slug><wp:tag_name><![CDATA[introduction]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>layout</wp:tag_slug><wp:tag_name><![CDATA[layout]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>me</wp:tag_slug><wp:tag_name><![CDATA[me]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>news</wp:tag_slug><wp:tag_name><![CDATA[News]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>validation</wp:tag_slug><wp:tag_name><![CDATA[validation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>wpf</wp:tag_slug><wp:tag_name><![CDATA[WPF]]></wp:tag_name></wp:tag>
	<image>
		<url>http://www.gravatar.com/blavatar/934f7f3dd6ba60a00e6005225d1760be?s=96&#038;d=http://s.wordpress.com/i/buttonw-com.png</url>
		<title>Colin Eberhardt's Adventures in WPF</title>
		<link>http://wpfadventures.wordpress.com</link>
	</image>
		<item>
<title>WPF DataGrid - Committing changes cell-by-cell</title>
<link>http://wpfadventures.wordpress.com/?p=38</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[DataGrid]]></category>

		<category domain="tag" nicename="datagrid"><![CDATA[DataGrid]]></category>

		<category domain="tag"><![CDATA[IEditableObject]]></category>

		<category domain="tag" nicename="ieditableobject"><![CDATA[IEditableObject]]></category>

		<category domain="tag"><![CDATA[WPF]]></category>

		<category domain="tag" nicename="wpf"><![CDATA[WPF]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=38</guid>
<description></description>
<content:encoded><![CDATA[In my recent <a href="http://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx">codeproject article on the DataGrid</a> I described a number of techniques for handling the updates to DataTables which are bound to the grid. These examples all worked on the assumption that you want to keep your database synchronised with the DataGrid, with changes being committed on a row-by-row basis, i.e. when the user finishes editing a row the changes are written to the database. The WPF DataGrid operates in a row-oriented manner making this a relatively straightforward scenario to implement.

However, what if you want to commit changes on a cell-by-cell basis? Firstly, lets have a look at the problem in a bit more detail. The following code displays a DataGrid, together with a 'details' view. Note that IsSynchronizedWithCurrentItem is set to true so that the details view and currently selected item within the grid will remain synchronised:
<pre>&lt;DockPanel DataContext="{Binding Source={StaticResource PersonData}}"&gt;

  &lt;Border DockPanel.Dock="Bottom" Padding="10"&gt;
    &lt;Grid x:Name="RootElement"&gt;
      &lt;Grid.ColumnDefinitions&gt;
        &lt;ColumnDefinition Width="*"/&gt;
        &lt;ColumnDefinition Width="1.8*"/&gt;
      &lt;/Grid.ColumnDefinitions&gt;

      &lt;Grid.RowDefinitions&gt;
        &lt;RowDefinition/&gt;
        &lt;RowDefinition/&gt;
        &lt;RowDefinition/&gt;
      &lt;/Grid.RowDefinitions&gt;

      &lt;Label Content="Forename:"/&gt;
      &lt;TextBox Grid.Column="1" Text="{Binding Forename}"/&gt;

      &lt;Label Grid.Row="1" Content="Surname:"/&gt;
      &lt;TextBox  Grid.Row="1" Grid.Column="1" Text="{Binding Surname}"/&gt;

      &lt;Label Grid.Row="2"  Content="Age:"/&gt;
      &lt;TextBox Grid.Row="2"   Grid.Column="1" Text="{Binding Age}"/&gt;
    &lt;/Grid&gt;
  &lt;/Border&gt;  

  &lt;dg:DataGrid ItemsSource="{Binding}" Name="dataGrid"
         IsSynchronizedWithCurrentItem="true"/&gt;
&lt;/DockPanel&gt;</pre>
The 'PersonData' in this case is a DataTable that is constructed in the code-behind.

Now, with this example, if you make changes to a persons surname, then click on the age cell and make changes there, the changes in surname are not reflected in the details view below:

<a href="http://wpfadventures.files.wordpress.com/2008/11/rownotcommitted.png"><img class="alignnone size-full wp-image-39" title="rownotcommitted" src="http://wpfadventures.files.wordpress.com/2008/11/rownotcommitted.png" alt="rownotcommitted" width="299" height="299" /></a>

In the above example the user has entered the surname "Blunt" and has moved onto the age cell, however the changes are not reflected in the details view below.

Why is this?

The reason is that when you bind to a DataTable, you are actually binding to your DataTable's DefaultView, which is of type DataView. As a result, each row of your table will be bound to a DataRowView. If you look at the documentation for <a href="http://msdn.microsoft.com/en-us/library/system.data.datarowview.aspx">DataRowView</a> you will find that it implements the <a href="http://www.google.co.uk/url?sa=t&amp;source=web&amp;ct=res&amp;cd=1&amp;url=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fsystem.componentmodel.ieditableobject.aspx&amp;ei=SQ4wSZy0KIbgwgHOmPWNCw&amp;usg=AFQjCNHpZx0Bm5eAgfjjXYEC125a0PnBKQ&amp;sig2=A8KtQWJwPJjE8t91q_0lFA">IEditableObject</a> interface which is the significant factor here. This interface allows you to perform trasnactional changes to your object, i.e. you can change the object's properties within a 'transaction', then commit then all in a single atomic action. By default, when you bind to a DataGrid this occurs when the user finishes editing a row, either by moving focus or hitting Enter. In order to allow cell-by-cell changes, we need to commit each time the user moves from one cell to the next in the currently selected row.

The DataGrid exposes a CellEditEnding event which looks like a good candidate for this, from the event arguments we can locate the current EditingElement (i.e. the TextBox which now occupies or cell that is in edit mode), the cell's Column and Row, and from here we can locate the Row.Item whcih is our bound DataRowView. You might think that we can just commit the change in this event handler, however, this is an 'Ending' event, not an 'Ended' event. In other words the value has not yet been written to the row. This catches me out far too often - as does its RowEditEnding counterpart!

So, if we cannot commit the edit here, how about the CurrentCellChanged event? however this event does not tell us which cell we just left. Although a simple combination of the two provides the effect we are after:
<pre>private DataRowView rowBeingEdited = null;

private void dataGrid_CellEditEnding(object sender,
                                  DataGridCellEditEndingEventArgs e)
{
    DataRowView rowView = e.Row.Item as DataRowView;
    rowBeingEdited = rowView;
}

private void dataGrid_CurrentCellChanged(object sender, EventArgs e)
{
    if (rowBeingEdited != null)
    {
        rowBeingEdited.EndEdit();
    }
}</pre>
With this change in place, changes are committed cell-by-cell and the two view remain synchronised:

<a href="http://wpfadventures.files.wordpress.com/2008/11/cellsynchronized.png"><img class="alignnone size-full wp-image-40" title="cellsynchronized" src="http://wpfadventures.files.wordpress.com/2008/11/cellsynchronized.png" alt="cellsynchronized" width="299" height="299" /></a>

You can download an example project, <a href="http://wpfadventures.files.wordpress.com/2008/11/wpfdatagridcellbycellcommits.doc">wpfdatagridcellbycellcommits</a>, changing the file extension from .doc to .zip.

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>38</wp:post_id>
<wp:post_date>2008-12-16 09:46:03</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1229424008</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Changing the DataGrid highlighted row colour </title>
<link>http://wpfadventures.wordpress.com/?p=53</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[DataGrid]]></category>

		<category domain="tag" nicename="datagrid"><![CDATA[DataGrid]]></category>

		<category domain="tag"><![CDATA[WPF]]></category>

		<category domain="tag" nicename="wpf"><![CDATA[WPF]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=53</guid>
<description></description>
<content:encoded><![CDATA[<a href="http://wpfadventures.files.wordpress.com/2008/12/highlightedrowstyle.png">
</a>

The default style for the WPF DataGrid renders the selected row in the standard windows theme color for selected items, a dark blue in Windows Classic theme. If you are new to WPF you might be wondering where this behaviour comes from and how can you change it?

When I first started out with WPF I assumed that this was hard-coded in C# within the code for each control (don't laugh!). However, as you come to learn more and more about WPF you discover that virtually every aspect of your control's visual style is specified declaratively within their XAML templates. For example, WPF buttons look just like normal Windows buttons, and their visual behaviour (i.e. focus rectangle, clicked style, etc ...) is also the same. However, every aspect of their appearance has been re-constructed in XAML.

Back to the problem in hand, changing the highlight colour for the DataGrid row. The first place we should start to look for the XAML whcih defines this colour is the DataGrid control template. There are a few routes you can take to this information:
<ul>
	<li>Download the WPF Toolkit sources and inspect the Generic.xaml template.</li>
	<li>Use a XAMLWriter to <a href="http://learnwpf.com/Posts/Post.aspx?postId=a3e4319b-b790-40b6-b92a-4b9b0b9d65b9">extract the control's XAML template.</a></li>
	<li>Using Expression Blend, right click a control to extract its control template.</li>
</ul>
The template of interest to us here is the DataGridCell template, given below (in edited form):
<div class="xml">
	<li class="li1">
<div class="de1"><span class="sc3"><span class="re1">&lt;Style</span> <span class="re0">x:Key</span>=<span class="st0">"{x:Type dg:DataGridCell}"</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3">                                <span class="re0">TargetType</span>=<span class="st0">"{x:Type dg:DataGridCell}"</span><span class="re2">&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">    ...</div></li>
	<li class="li1">
<div class="de1">  <span class="sc3"><span class="re1">&lt;Style</span>.Triggers<span class="re2">&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">    <span class="sc3"><span class="re1">&lt;Trigger</span> <span class="re0">Property</span>=<span class="st0">"IsSelected"</span> <span class="re0">Value</span>=<span class="st0">"True"</span><span class="re2">&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">      <span class="sc3"><span class="re1">&lt;Setter</span> <span class="re0">Property</span>=<span class="st0">"Background"</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3">              <span class="re0">Value</span>=<span class="st0">"{DynamicResource</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3"><span class="st0">                         {x:Static SystemColors.HighlightBrushKey}}"</span> <span class="re2">/&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">      <span class="sc3"><span class="re1">&lt;Setter</span> <span class="re0">Property</span>=<span class="st0">"Foreground"</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3">              <span class="re0">Value</span>=<span class="st0">"{DynamicResource</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3"><span class="st0">                        {x:Static SystemColors.HighlightTextBrushKey}}"</span> <span class="re2">/&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">      <span class="sc3"><span class="re1">&lt;Setter</span> <span class="re0">Property</span>=<span class="st0">"BorderBrush"</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3">              <span class="re0">Value</span>=<span class="st0">"{DynamicResource</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3"><span class="st0">                        {x:Static SystemColors.HighlightBrushKey}}"</span> <span class="re2">/&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">    <span class="sc3"><span class="re1">&lt;/Trigger<span class="re2">&gt;</span></span></span></div></li>
	<li class="li1">
<div class="de1">    <span class="sc3"><span class="re1">&lt;Trigger</span> <span class="re0">Property</span>=<span class="st0">"IsKeyboardFocusWithin"</span> <span class="re0">Value</span>=<span class="st0">"True"</span><span class="re2">&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">      <span class="sc3"><span class="re1">&lt;Setter</span> <span class="re0">Property</span>=<span class="st0">"BorderBrush"</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3">              <span class="re0">Value</span>=<span class="st0">"{DynamicResource</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3"><span class="st0">                        {x:Static dg:DataGrid.FocusBorderBrushKey}}"</span> <span class="re2">/&gt;</span></span></div></li>
	<li class="li1">
<div class="de1">    <span class="sc3"><span class="re1">&lt;/Trigger<span class="re2">&gt;</span></span></span></div></li>
	<li class="li1">
<div class="de1">  <span class="sc3"><span class="re1">&lt;/Style</span>.Triggers<span class="re2">&gt;</span></span></div></li>
	<li class="li1">
<div class="de1"><span class="sc3"><span class="re1">&lt;/Style<span class="re2">&gt;</span></span></span></div></li>
</div>
All the non-dynamic parts of the above template have been ommited, leaving the dynamic/behavioural parts. The two triggers shown above are property triggers, the styles which they enclose are applied when the given property changes state to the given value. The very cool thing to note here is that we do not have to specify what happens when the property state no longer matches the given value. The WPF framework will automatically renmove the styles revrting to the original state.

The colours themselves are all specified as DynamicResources that reference static properties of the SystemColors class. DynamicResource references will be refreshes if the reference value changes, therefore if someone changes one of the system colours, your WPF application will change its apperance at runtime to reflect this.

From <strong>Control Panel =&gt; Display =&gt; Appearance =&gt; Advanced</strong>

<a href="http://wpfadventures.files.wordpress.com/2008/12/systemproperty.png"><img class="alignnone size-full wp-image-55" title="systemproperty" src="http://wpfadventures.files.wordpress.com/2008/12/systemproperty.png" alt="systemproperty" width="383" height="411" /></a>

The change will be visible once applied.

<a href="http://wpfadventures.files.wordpress.com/2008/12/systemcolorchange.png"><img class="alignnone size-full wp-image-54" title="systemcolorchange" src="http://wpfadventures.files.wordpress.com/2008/12/systemcolorchange.png" alt="systemcolorchange" width="255" height="260" /></a>

If we want to change the highlighted row colour for our grid we can change this style to meet our own colour scheme:
<pre>&lt;Style x:Key="{x:Type dg:DataGridCell}"
       TargetType="{x:Type dg:DataGridCell}"&gt;
    &lt;Style.Triggers&gt;
        &lt;Trigger Property="IsSelected" Value="True"&gt;
            &lt;Setter Property="Background" Value="Orange" /&gt;
            &lt;Setter Property="BorderBrush" Value="Orange"/&gt;
        &lt;/Trigger&gt;
    &lt;/Style.Triggers&gt;
&lt;/Style&gt;</pre>
Giving the following effect:

<a href="http://wpfadventures.files.wordpress.com/2008/12/highlightedrowstyle.png"><img class="alignnone size-full wp-image-56" title="highlightedrowstyle" src="http://wpfadventures.files.wordpress.com/2008/12/highlightedrowstyle.png" alt="highlightedrowstyle" width="299" height="299" /></a>

In the above example the x:Key for our style is of type DataGridCell, this will apply the style to any DataGridCell objects within the scope of this Style. We could alternatively use a named style and reference it using our DataGrid's CellStyle property. WPF Resources are dictionaries (i.e. hashtables), which are typically used with string keys. However, when the a WPF control is rendered, if it does not have a style specified by its Style property or via its container (e.g. a DataGrid), it will look for an entry in the Resource dictionary using the controls type as a key.

However, there is an even simple alternative that can be applied. You can override the system colours directly, as shown below:
<pre>&lt;SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                                                     Color="Orange"/&gt;</pre>
This will change the selected item style for all controls within the scope of the above resource.

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>53</wp:post_id>
<wp:post_date>2008-12-16 12:53:45</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1229432026</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>About</title>
<link>http://wpfadventures.wordpress.com/about/</link>
<pubDate>Wed, 26 Nov 2008 15:23:14 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false"></guid>
<description></description>
<content:encoded><![CDATA[Welcome to my blog, <em>Colin Eberhardt's Adventures in WPF</em>. This page gives a little background on myself and the blog.

My name is Colin Eberhardt and I have been involved in software, in a number of shapes and forms, for more than a decade now. I have dabbled in a range of technologies from Enterprise Java, C#.NET through to programming embedded DSP and microprocessors. I also have experience in Mechanical, Electronic and Optical engineering; these have helped shape my perspective on software and how it should be developed. I currently work as a Lead Developer at <a href="http://www.scottlogic.co.uk">Scott Logic</a>, a UK based provider of software and consulting services to the Financial Sector.

This blog is primarily focussed on <a href="en.wikipedia.org/wiki/Windows_Presentation_Foundation">Windows Presentation Foundation</a> (WPF), the next-generation UI framework from Microsoft. The reason I started this blog is because the architecture of WPF has a certain beauty to it, however it lacks the drag-and-drop style development tools available to Windows Forms developers, which can make it something of a challenge.

I intend to use this blog to share my ideas, thoughts, tips and tricks with the WPF developer community.

I am happy to receive any questions or feedback.

Regards, Colin E.

mail: ceberhardt@scottlogic.co.uk]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>2</wp:post_id>
<wp:post_date>2008-11-26 15:23:14</wp:post_date>
<wp:post_date_gmt>2008-11-26 15:23:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>about</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1227782777</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Hello World</title>
<link>http://wpfadventures.wordpress.com/2008/11/26/hello-world-2/</link>
<pubDate>Wed, 26 Nov 2008 15:47:51 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[introduction]]></category>

		<category domain="tag" nicename="introduction"><![CDATA[introduction]]></category>

		<category domain="tag"><![CDATA[me]]></category>

		<category domain="tag" nicename="me"><![CDATA[me]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=3</guid>
<description></description>
<content:encoded><![CDATA[Welcome to the birth of my blog, "Adventures in WPF". This is the first blog I have started for the very good reason that up until now i have not found anything that I really feel like blogging about!

However, this all changed when I started to learn Windows Presentation Foundation (WPF), the new presentation framework from Microsoft. In my opinion this framework has greater depth and beauty than any other User interface (UI) framework I have worked with before.

I have already authored a number of well received WPF articles which you can find on <a title="codeproject" href="http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=5264226">codeproject</a>. However, writing a full-blown article takes a lot of effort. I intend to use this blog for sharing thoughts, ideas, tips and tricks that are either to small for crafting into an article, or if I simply do not have the time. Now all I have to do is learn the <a href="http://www.codescheme.net/2008/10/02/wordpress-pingbacks-and-trackbacks-whats-the-difference/">difference between trackbacks and pingbacks</a> and I can get started ...

I am always happy to receive feedback - so please leave a comment or send me a mail.

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>3</wp:post_id>
<wp:post_date>2008-11-26 15:47:51</wp:post_date>
<wp:post_date_gmt>2008-11-26 15:47:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>hello-world-2</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1227781206</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>multiselect</title>
<link>http://wpfadventures.wordpress.com/2008/11/26/multiselect-datagrid-with-checkboxes/multiselect/</link>
<pubDate>Wed, 26 Nov 2008 16:52:51 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/multiselect.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>8</wp:post_id>
<wp:post_date>2008-11-26 16:52:51</wp:post_date>
<wp:post_date_gmt>2008-11-26 16:52:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>multiselect</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>6</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/multiselect.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/multiselect.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"215";s:6:"height";s:3:"196";s:14:"hwstring_small";s:23:"height='96' width='105'";s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/multiselect.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>datagridselectproblem</title>
<link>http://wpfadventures.wordpress.com/2008/11/26/multiselect-datagrid-with-checkboxes/datagridselectproblem/</link>
<pubDate>Wed, 26 Nov 2008 16:52:54 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/datagridselectproblem.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>9</wp:post_id>
<wp:post_date>2008-11-26 16:52:54</wp:post_date>
<wp:post_date_gmt>2008-11-26 16:52:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>datagridselectproblem</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>6</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/datagridselectproblem.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/datagridselectproblem.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"214";s:6:"height";s:3:"210";s:14:"hwstring_small";s:22:"height='96' width='97'";s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/datagridselectproblem.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>wpfdatagridmultiselect</title>
<link>http://wpfadventures.wordpress.com/2008/11/26/multiselect-datagrid-with-checkboxes/wpfdatagridmultiselect/</link>
<pubDate>Wed, 26 Nov 2008 16:57:59 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/wpfdatagridmultiselect.doc</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>10</wp:post_id>
<wp:post_date>2008-11-26 16:57:59</wp:post_date>
<wp:post_date_gmt>2008-11-26 16:57:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wpfdatagridmultiselect</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>6</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/wpfdatagridmultiselect.doc</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/wpfdatagridmultiselect.doc</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Multiselect DataGrid with CheckBoxes</title>
<link>http://wpfadventures.wordpress.com/2008/11/26/multiselect-datagrid-with-checkboxes/</link>
<pubDate>Wed, 26 Nov 2008 16:59:39 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[DataGrid]]></category>

		<category domain="tag" nicename="datagrid"><![CDATA[DataGrid]]></category>

		<category domain="tag"><![CDATA[WPF]]></category>

		<category domain="tag" nicename="wpf"><![CDATA[WPF]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=6</guid>
<description></description>
<content:encoded><![CDATA[I am currently very interested in the new WPF DataGrid which was released on <a href="http://www.codeplex.com/wpf">codeplex</a> recently. Someone posted an interesting question in the <a href="http://www.codeplex.com/wpf/Thread/View.aspx">codeplex forums</a> asking about whether it would be possible to configure the DataGrid so that a user can make multiple row selections via checkboxes which are associated with each row. I thought that this sounded like an excellent idea - afterall, the standard behaviour of ctrl-leftclick might be intuitive to the computer savvy, however you can bet the average user (which is certainly the majority) does not know this.

Fortunately the solution is quite simple to implement in WPF:
<pre>&lt;dg:DataGrid ItemsSource="{Binding}"&gt;
  &lt;dg:DataGrid.RowHeaderTemplate&gt;
    &lt;DataTemplate&gt;
      &lt;Grid&gt;
        &lt;CheckBox IsChecked="{Binding Path=IsSelected, Mode=TwoWay,
                  RelativeSource={RelativeSource FindAncestor,
                  AncestorType={x:Type dg:DataGridRow}}}"/&gt;
      &lt;/Grid&gt;
    &lt;/DataTemplate&gt;
  &lt;/dg:DataGrid.RowHeaderTemplate&gt;
&lt;/dg:DataGrid&gt;</pre>
The above code provides a DataTemplate for the RowHeader allowing us to render a CheckBox for each row. The IsChecked property uses a RelativeSource binding which navigates the Visual Tree to locate the first ancestor of type DataGridRow. From here the IsSelected property which dictates that the selected state of the row is available. The binding is TwoWay so that ctrl-leftclick behaviour is still visible.

The result is illustrated below:

<a href="http://wpfadventures.files.wordpress.com/2008/11/multiselect.png"><img class="alignnone size-full wp-image-8" title="multiselect" src="http://wpfadventures.files.wordpress.com/2008/11/multiselect.png" alt="multiselect" width="215" height="196" /></a>

The above example is a concise illustration of the beauty of WPF. Performing the above customisation of the DataGridView in Windows Forms would be at least an afternoons work. However the solution is not without its problems, if you try the above you will find that the checkboxes are rather difficult to click on because the mouse cursor will be displaying the up-down arrow that indicates that it is currently over the gripper that allows you to specify the row height.

Finding the cause of this means delving deep into the DataGrid control templates ...

The template for the DataGridRowHeader is given below (in edited form):
<pre>&lt;Style x:Key="{x:Type dgp:DataGridRowHeader}"
       TargetType="{x:Type dgp:DataGridRowHeader}"&gt;
  &lt;Setter Property="Template"&gt;
    &lt;Setter.Value&gt;
      &lt;ControlTemplate TargetType="{x:Type dgp:DataGridRowHeader}"&gt;
        &lt;Grid&gt;
          ... snipped header content + validation error indicator ...
          &lt;Thumb x:Name="PART_TopHeaderGripper"
                 VerticalAlignment="Top"
                 Style="{StaticResource RowHeaderGripperStyle}"/&gt;
          &lt;Thumb x:Name="PART_BottomHeaderGripper"
                 VerticalAlignment="Bottom"
                 Style="{StaticResource RowHeaderGripperStyle}"/&gt;
        &lt;/Grid&gt;
      &lt;/ControlTemplate&gt;
    &lt;/Setter.Value&gt;
  &lt;/Setter&gt;
&lt;/Style&gt;</pre>
The header template includes a pair of grippers. The visible state of these is toggled depending on the row's location (i.e. there is no top gripper on the first row), and whether the DataGrid CanResizeRows is true.

The RowHeaderGripperStyle specifies a Transparent background for the grippers which renders them invisible. If we change this to Green we can see the culprits:

<a href="http://wpfadventures.files.wordpress.com/2008/11/datagridselectproblem.png"><img class="alignnone size-full wp-image-9" title="datagridselectproblem" src="http://wpfadventures.files.wordpress.com/2008/11/datagridselectproblem.png" alt="datagridselectproblem" width="214" height="210" /></a>

In order to allow our Checkboxes to be clickable, we simply reduce the height of the grippers as follows:
<pre>&lt;Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}"&gt;
  &lt;Setter Property="Height" Value="2"/&gt;
  &lt;Setter Property="Background" Value="Green"/&gt;
  &lt;Setter Property="Cursor" Value="SizeNS"/&gt;
  &lt;Setter Property="Template"&gt;
    &lt;Setter.Value&gt;
      &lt;ControlTemplate TargetType="{x:Type Thumb}"&gt;
        &lt;Border Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"/&gt;
      &lt;/ControlTemplate&gt;
    &lt;/Setter.Value&gt;
  &lt;/Setter&gt;
&lt;/Style&gt;</pre>
Unfortunately this means that we have to duplicate the DataGrid parts; the DataGridRowHeader template and the above style, in order to perform this customisation. The Beauty of XAML and a Beast of a control template!

You can download the demo project, <a href="http://wpfadventures.files.wordpress.com/2008/11/wpfdatagridmultiselect.doc">wpfdatagridmultiselect</a>, changing the file extension from .doc to .zip.

Regards, Colin E.

P.S. You can achieve the same effect with a ListView as detailed in <a href="http://weblogs.asp.net/marianor/archive/2008/02/04/multiselect-listview-with-checkboxes-in-wpf.aspx">this blog post</a>.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>6</wp:post_id>
<wp:post_date>2008-11-26 16:59:39</wp:post_date>
<wp:post_date_gmt>2008-11-26 16:59:39</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>multiselect-datagrid-with-checkboxes</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1232029559</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>2</wp:comment_id>
<wp:comment_author><![CDATA[klauswiesel]]></wp:comment_author>
<wp:comment_author_email>klaus.wiesel@infor.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>145.253.150.60</wp:comment_author_IP>
<wp:comment_date>2008-11-28 11:12:34</wp:comment_date>
<wp:comment_date_gmt>2008-11-28 11:12:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Colin

this is pretty nice. 

I have a similar feature in my datagrid, I have a property "IsSelected" in the data objects shown in my grid, and I can select rows without getting the rows "paint" in blue which would destroy readibility as I have hyperlinks cols.

One thing that is disturbing me is the fact, that the "IsSelected" column is inside my datagrid. I like it to be in the row header,like in your example, only difference is that the row header is not bound to the rows' "IsSelected" but the data object "IsSelected"

I wonder how this would be solved

Thanks in advance
Klaus]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3</wp:comment_id>
<wp:comment_author><![CDATA[colineberhardt]]></wp:comment_author>
<wp:comment_author_email>ceberhardt@scottlogic.co.uk</wp:comment_author_email>
<wp:comment_author_url>http://www.scottlogic.co.uk</wp:comment_author_url>
<wp:comment_author_IP>217.23.234.99</wp:comment_author_IP>
<wp:comment_date>2008-11-28 11:42:31</wp:comment_date>
<wp:comment_date_gmt>2008-11-28 11:42:31</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi Klaus,

Glad you like it. A few thoughts on your problem ...

You can bind to properties of your object within the Row Header, for example this will show a persons surname:

<code>[dg:DataGrid ItemsSource="{Binding}"]
    [dg:DataGrid.RowHeaderTemplate]
        [DataTemplate]
            [Grid]
                [TextBox Text="{Binding Path=Item.Surname, Mode=TwoWay,
                    RelativeSource={RelativeSource FindAncestor,
                    AncestorType={x:Type dg:DataGridRow}}}"/]
            [/Grid]
        [/DataTemplate]
    [/dg:DataGrid.RowHeaderTemplate]
[/dg:DataGrid]</code>

or ...

you can modify the DataGridCell style so that the IsSelected property trigger is the colour of your choice:

<code>[Style x:Key="{x:Type dg:DataGridCell}" TargetType="{x:Type dg:DataGridCell}"]            
    [Style.Triggers]
        [Trigger Property="IsSelected" Value="True"]
            [Setter Property="Background" Value="Orange" /]
        [/Trigger]
    [/Style.Triggers]
[/Style]</code>

or ...

you can globally modify the highlighted row colour as detailed here:
http://imduff.wordpress.com/2008/03/01/change-highlight-color-when-an-item-in-a-listview-is-selected/

Choices, choices.

Have fun,
Colin E.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>5906272</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4</wp:comment_id>
<wp:comment_author><![CDATA[klauswiesel]]></wp:comment_author>
<wp:comment_author_email>klaus.wiesel@infor.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>145.253.150.60</wp:comment_author_IP>
<wp:comment_date>2008-11-28 13:04:46</wp:comment_date>
<wp:comment_date_gmt>2008-11-28 13:04:46</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Colin

very nice. I think I will go the first and second way as both makes sense.

One detail: how can I set the column header for the row header? I'd like to show the text "Selected yes/no" as header for the checkbox column

Regards
Klaus

P.S. You are really doing a great job for pushing wpf... keep on!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>5</wp:comment_id>
<wp:comment_author><![CDATA[colineberhardt]]></wp:comment_author>
<wp:comment_author_email>ceberhardt@scottlogic.co.uk</wp:comment_author_email>
<wp:comment_author_url>http://www.scottlogic.co.uk</wp:comment_author_url>
<wp:comment_author_IP>217.23.234.99</wp:comment_author_IP>
<wp:comment_date>2008-11-28 17:11:47</wp:comment_date>
<wp:comment_date_gmt>2008-11-28 17:11:47</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi,

There is no out-of-the-box support for a heading above the row headers. To implement this you would have to become quite familiar with the visual layout of the DataGrid:

http://blogs.msdn.com/vinsibal/archive/2008/08/14/wpf-datagrid-dissecting-the-visual-layout.aspx

.. allowing you to implement this from scratch. Not an easy task!

Colin E.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>5906272</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>11</wp:comment_id>
<wp:comment_author><![CDATA[Divya]]></wp:comment_author>
<wp:comment_author_email>divya.jagannath@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>220.227.91.195</wp:comment_author_IP>
<wp:comment_date>2009-01-07 08:58:34</wp:comment_date>
<wp:comment_date_gmt>2009-01-07 08:58:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi Colin,

The feature about datagrid with checkbox column described here is very useful. I had a requirement to display the checkbox in the  header in the first column, for display purpose. Is this poassible?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>14</wp:comment_id>
<wp:comment_author><![CDATA[colineberhardt]]></wp:comment_author>
<wp:comment_author_email>ceberhardt@scottlogic.co.uk</wp:comment_author_email>
<wp:comment_author_url>http://www.scottlogic.co.uk</wp:comment_author_url>
<wp:comment_author_IP>217.23.234.99</wp:comment_author_IP>
<wp:comment_date>2009-01-07 16:59:38</wp:comment_date>
<wp:comment_date_gmt>2009-01-07 16:59:38</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi Divya,

I am not quite sure what you mean by the 'header in the first column'? How can you use a column header to dictate row selection state?

Or do you mean that you want the checkbox to live in the first DataGrid column? If so, you should be able to use the same relative source binding given at the start of this article within a CellTemplate. See the following example for creating CellTenmplates:

http://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx#templates

Regards,
Colin E.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>5906272</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>15</wp:comment_id>
<wp:comment_author><![CDATA[Divya]]></wp:comment_author>
<wp:comment_author_email>divya.jagannath@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>220.227.91.195</wp:comment_author_IP>
<wp:comment_date>2009-01-08 13:59:44</wp:comment_date>
<wp:comment_date_gmt>2009-01-08 13:59:44</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi Colin,

Thanks for your response. I'm sorry I hadn't explained the expected funtionality.
The requirement is that when the user "checks" / "selects" on the Checkbox (SelectAll) the checkboxes in all rows are are checked &amp; all the rows are highlighted as "Selected" and if the Checkbox (SelectAll) is "unselected" / "unchecked", the checkboxes in all the rows correspondingly get unchecked &amp; highlighting of all the rows should be undone.
I tried the code snippet from the website given by you, but I'm facing a problem in it. When I select multiple rows using the checkbox (For Ex: 5 continuous rows) and then if I try to uncheck the checkbox, (for ex:- checkbox pertaining to second row), then checkbox remains checked but the selection of the second row remains, instead the other rows will be unselected &amp; so will be the checkboxes!! 
Is this behavior appearing because the row selection "IsSelected" property is assigned to the checkbox "IsChecked" property and not vice versa?
I need to highlight the  selected row in the datagrid, when the checkbox is checked and undo the highlighting / selection of the row when the checkbox is unchecked.
Can you please help me around with this?


Also I wanted to know if it is possible to incorporate a checkbox (instead of gray area) for the "Select All" purpose using a row header template itself?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>dragdropbinding</title>
<link>http://wpfadventures.wordpress.com/2008/11/27/design-time-drag-and-drop-binding-is-on-its-way/dragdropbinding/</link>
<pubDate>Thu, 27 Nov 2008 15:47:54 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/dragdropbinding.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>26</wp:post_id>
<wp:post_date>2008-11-27 15:47:54</wp:post_date>
<wp:post_date_gmt>2008-11-27 15:47:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>dragdropbinding</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>25</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/dragdropbinding.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/dragdropbinding.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"313";s:6:"height";s:3:"242";s:14:"hwstring_small";s:23:"height='96' width='124'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/dragdropbinding.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Design time drag-and-drop binding is on its way</title>
<link>http://wpfadventures.wordpress.com/2008/11/27/design-time-drag-and-drop-binding-is-on-its-way/</link>
<pubDate>Thu, 27 Nov 2008 15:57:48 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[News]]></category>

		<category domain="tag" nicename="news"><![CDATA[News]]></category>

		<category domain="tag"><![CDATA[WPF]]></category>

		<category domain="tag" nicename="wpf"><![CDATA[WPF]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=25</guid>
<description></description>
<content:encoded><![CDATA[In my opinion the lack of decent design-time tool support is currently hampering the adoption of WPF, that and the relatively small number of controls available to the developer out-of-the-box. The later is being addressed to a certain extent by the developer community, notably by Marlon Grech's <a href="http://marlongrech.wordpress.com/avalon-controls-library/">Avalon Controls Library</a> and the <a href="http://www.codeplex.com/wpf">WPF Toolkit</a>. The former, design-time support, is something that is harder for the developer community to address, however Karl Shifflet's <a href="http://karlshifflett.wordpress.com/xaml-power-toys/">XAML Power Toys</a>, which add drag and drop form generation make a pretty good stab at it.

Despite this, people are adopting WPF even though it is <a href="http://joshsmithonwpf.wordpress.com/2008/04/21/why-use-wpf-if-it-is-not-rad-yet/">not RAD yet</a>. Paul Stovell provides a great demonstration of <a href="http://www.paulstovell.com/blog/wpf-leverage">how productive WPF really is</a>.

However; there are interesting developments at Microsoft, a video on Channel 9 reveals that<a href="http://channel9.msdn.com/posts/funkyonex/Drag-Drop-Data-Binding-Comes-to-WPF-in-Visual-Studio-2010/"> Drag-Drop Data Binding will com to WPF in Visual Studio 2010</a>. Exciting news indeed!

The screenshot below shows a Window which contains two ListViews in a master-detail configuration, which was entirely developed by drag and drop (minus a few code tweaks due to minor bugs in the VS 2010 CTP):

<a href="http://wpfadventures.files.wordpress.com/2008/11/dragdropbinding.jpg"><img class="alignnone size-full wp-image-26" title="dragdropbinding" src="http://wpfadventures.files.wordpress.com/2008/11/dragdropbinding.jpg" alt="dragdropbinding" width="313" height="242" /></a>

The demonstration details how DataSets, ADO.NET Entities, or Objects can be bound - with master-detail view achieved by 'chaining' CollectionViewSources, in the same way that you would a Windows Forms BindingSource. All this will sound familiar (and cosy) to a Windows Forms developer.

I am guessing that VS2010 will also provide the same drag and drop support for the WPF DataGrid.

While this looks like excellent news, drag and drop is not the be-all and end-all of RAD application development. Once you have dragged your UI elements onto the Window you would also want to be able to re-configure the source of the bindings, or the bound properties without having to touch the XAML. I do hope that VS 2010 brings this functionality also.

Either way, VS 2010 should open up WPF to a whole new audience.

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>25</wp:post_id>
<wp:post_date>2008-11-27 15:57:48</wp:post_date>
<wp:post_date_gmt>2008-11-27 15:57:48</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>design-time-drag-and-drop-binding-is-on-its-way</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1227802571</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>standardvalidation</title>
<link>http://wpfadventures.wordpress.com/2008/11/28/using-bindinggroups-for-greater-control-over-input-validation/standardvalidation/</link>
<pubDate>Fri, 28 Nov 2008 09:56:58 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/standardvalidation.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>32</wp:post_id>
<wp:post_date>2008-11-28 09:56:58</wp:post_date>
<wp:post_date_gmt>2008-11-28 09:56:58</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>standardvalidation</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>31</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/standardvalidation.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/standardvalidation.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"314";s:6:"height";s:3:"159";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:93:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/standardvalidation.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>bindinggroupvalidation</title>
<link>http://wpfadventures.wordpress.com/2008/11/28/using-bindinggroups-for-greater-control-over-input-validation/bindinggroupvalidation/</link>
<pubDate>Fri, 28 Nov 2008 11:14:16 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/bindinggroupvalidation.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>33</wp:post_id>
<wp:post_date>2008-11-28 11:14:16</wp:post_date>
<wp:post_date_gmt>2008-11-28 11:14:16</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>bindinggroupvalidation</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>31</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/bindinggroupvalidation.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/bindinggroupvalidation.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"436";s:6:"height";s:3:"140";s:14:"hwstring_small";s:23:"height='41' width='128'";s:4:"file";s:97:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/bindinggroupvalidation.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Using BindingGroups for greater control over input validation</title>
<link>http://wpfadventures.wordpress.com/2008/11/28/using-bindinggroups-for-greater-control-over-input-validation/</link>
<pubDate>Fri, 28 Nov 2008 11:21:29 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[validation]]></category>

		<category domain="tag" nicename="validation"><![CDATA[validation]]></category>

		<category domain="tag"><![CDATA[WPF]]></category>

		<category domain="tag" nicename="wpf"><![CDATA[WPF]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=31</guid>
<description></description>
<content:encoded><![CDATA[In a recent post on his blog Josh Smith described a technique for providing more meaningful error messages when the type conversion process fails within the binding framework. Consider the following problem; you bind an integer property of your object (Age for example) to a TextBox within your user interface. If the user enters a non-numeric value into the TextBox an exception is thrown within the binding framework when it attempts to parse this value. The framework provide s a way of catching validation exceptions, by setting ValidatesOnExceptions to true within a binding, however the error message provided is "Input string was not in a correct format." - this is the sort of error message that a software engineer would understand, but not the majority of the population!

<a href="http://wpfadventures.files.wordpress.com/2008/11/standardvalidation.png"><img class="alignnone size-full wp-image-32" title="standardvalidation" src="http://wpfadventures.files.wordpress.com/2008/11/standardvalidation.png" alt="standardvalidation" width="314" height="159" /></a>

Josh details a technique that can be used to provide <a href="http://joshsmithonwpf.wordpress.com/2008/11/14/using-a-viewmodel-to-provide-meaningful-validation-error-messages/">more meaningful error messages</a>. His technique uses a View-Model (the classes which massage your data into a form which is more amenable to your presentation technology), which binds a text 'Age' property to ensure that there are no type conversions issues in the binding, allowing the issue of parsing errors to be managed directly. This blog post illustrates an alternative technique to his approach, using the recently introduced feature of BindingGroups.

Take for example a very simple example, a Person class which has properties of Name and Age. This class implements IDataErrorInfo, allowing us to manage validation logic within the business objects themselves. This class has a pair of simple rules which are applied to the Age property.
<pre>public class Person : IDataErrorInfo, INotifyPropertyChanged
{
    private int age;
    public int Age
    {
        get { return age; }
        set {
            age = value;
            RaisePropertyChanged("Age");
        }
    }

    private string name;
    public string Name
    {
        get { return name; }
        set {
            name = value;
            RaisePropertyChanged("Name");
        }
    }

    #region IDataErrorInfo Members
    public string Error
    {
        get { return null; }
    }

    public string this[string columnName]
    {
        get {
            if (columnName == "Age")
            {
                if (Age &lt; 0)
                    return "Age cannot be less than 0.";
                if (Age &gt; 120)
                    return "Age cannot be greater than 120.";
            }
            return null;
        }
    }
    #endregion

    #region INotifyPropertyChanged Members
    ...
    #endregion
}</pre>
An instance of the above class is displayed in a simple form using the following XAML:
<pre>&lt;Grid x:Name="RootElement"&gt;
  &lt;Grid.BindingGroup&gt;
    &lt;BindingGroup&gt;
      &lt;BindingGroup.ValidationRules&gt;
        &lt;local:PersonValidationRule
          ValidationStep="ConvertedProposedValue"/&gt;
      &lt;/BindingGroup.ValidationRules&gt;
    &lt;/BindingGroup&gt;
  &lt;/Grid.BindingGroup&gt;

  &lt;Grid.ColumnDefinitions&gt;
    &lt;ColumnDefinition Width="*"/&gt;
    &lt;ColumnDefinition Width="1.8*"/&gt;
  &lt;/Grid.ColumnDefinitions&gt;

  &lt;Grid.RowDefinitions&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
  &lt;/Grid.RowDefinitions&gt;

  &lt;Label Content="Name:"/&gt;
  &lt;TextBox Grid.Column="1" LostFocus="TextBox_LostFocus"
       Text="{Binding Name, ValidatesOnDataErrors=true}"/&gt;

  &lt;Label Grid.Row="1" Content="Age:"/&gt;
  &lt;TextBox Grid.Row="1" Grid.Column="1" LostFocus="TextBox_LostFocus"
       Text="{Binding Age, ValidatesOnDataErrors=true}"/&gt;   

  &lt;Label Grid.Row="2" Grid.ColumnSpan="2" Foreground="Red"
       Content="{Binding Path=(Validation.Errors)[0].ErrorContent,
               ElementName=RootElement}"/&gt;

&lt;/Grid&gt;</pre>
The TextBox bindings use ValidatesOnDataErrors, this ensures that the IDataErrorInfo interface methods on the Person class will be invoked, enforcing our Age rules. However, they do not handle exceptions thrown in the binding process, i.e. ValidatesOnExceptions is absent.

The interesting part of the above code is the BindingGroup which is present in the Grid element, i.e. at the 'Form' level. When you define a BindingGroup it is related to the DataContext of the element that it is defined against. The BindingGroup will then have access to all the other Bindings which relate to this DataContext. In the above example, the bindings inherit the Grid's DataContext and are members of the same BindingGroup.

BindingGroups allow group level validation, this is useful for example if you have validation rules which relate to more than one property, for example "StartDate &lt; EndDate". You can read all about BindingGroups on <a href="http://blogs.msdn.com/vinsibal/archive/2008/08/11/wpf-3-5-sp1-feature-bindinggroups-with-item-level-validation.aspx">Vincent Sibal's Blog</a>.

In the above example, we do not have complex validation logic, so why use a BindingGroup?

When a ValidationRule is associated with a BindingGroup it has access to both the BindingExpressions, i.e. the "Name" and "Age" bindings in our example, and the BindingGroup instance itself. This class has some very useful methods like <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.bindinggroup.trygetvalue.aspx">TryGetValue</a>, which will attempt to get the bound value from the TextBox (or other bound UI control). However, the interesting part is that you can determine at what point in the binding pipeline your validation rule is applied, which will in turn determine whether you get back the raw value from the control, for example the string "34", or the value after it has been parsed, i.e., an integer '34'.

When BindingGroup was added to the API in .NET 3.5 SP1, the ValidationRule class was extended to add a ValidationStep property. This enumeration indicates at what stage within the binding pipeline a particular rule is invoked. The four possible enumeration values are <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.validationstep.aspx">detailed on MSDN</a>. The one which we are interested in here is ConvertedProposedValue, which will mean that our rule is invoked after the binding framework has parsed the input string to an integer.

Here is our validation rule:
<pre>public class PersonValidationRule : ValidationRule
{
    public override ValidationResult Validate(object value,
                                             CultureInfo cultureInfo)
    {
        BindingGroup bindingGroup = (BindingGroup)value;
        Person person = (Person)bindingGroup.Items[0];

        // validate the age
        object objValue = null;
        if (!bindingGroup.TryGetValue(person, "Age", out objValue))
        {
            return new ValidationResult(false, "Age is not a whole number");
        }

        // if we can retrieve the value - can we parse it to an int?
        int parseResult;
        if (!Int32.TryParse(objValue as string, out parseResult))
        {
            return new ValidationResult(false,
                            string.Format("Age is not a whole number"));
        }

        return ValidationResult.ValidResult;
    }
}</pre>
In the above code we ask the BindingGroup to provide its proposed value for the Age property. If the user has input a non-numeric value, TryParse will fail. We can then catch this failure and provide a suitable error message.

The final piece of the puzzle is dictating when this BindingGroup runs its associated rules. One of the primary purposes of the bindingGroup is to allow transactional editing of objects, for example within the WPF DataGrid it is used to commit a Row as a 'atom'. We must manually commit this BindingGroup in order to run our rule, a 'Submit' button could be added to our form, but for simplicity in this example I simply commit as each TextBox loses focus:
<pre>private void TextBox_LostFocus(object sender, RoutedEventArgs e)
{
    RootElement.BindingGroup.CommitEdit();
}</pre>
When using BindingGroups we can still of course validate each Binding independently, our ValidatesOnDataErrors still works.

The finished result is shown below, the screenshot on the right shows how our rule within the BindingGroup catches the case where the string cannot be parsed, and on the left where our Age rule enforced via IDataErrorInfo is violated.

<a href="http://wpfadventures.files.wordpress.com/2008/11/bindinggroupvalidation.png"><img class="alignnone size-full wp-image-33" title="bindinggroupvalidation" src="http://wpfadventures.files.wordpress.com/2008/11/bindinggroupvalidation.png" alt="bindinggroupvalidation" width="436" height="140" /></a>

You can download a demo project with all of this code - <a href="http://wpfadventures.files.wordpress.com/2008/11/bindinggroupvalidation1.doc">bindinggroupvalidation</a>, simple change the file extension from .doc to .zip.

*phew* - I thought I started writing a blog so that I could avoid writing lengthy articles!

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>31</wp:post_id>
<wp:post_date>2008-11-28 11:21:29</wp:post_date>
<wp:post_date_gmt>2008-11-28 11:21:29</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>using-bindinggroups-for-greater-control-over-input-validation</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1232027979</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>18</wp:comment_id>
<wp:comment_author><![CDATA[hugeonion]]></wp:comment_author>
<wp:comment_author_email>chujanen@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://</wp:comment_author_url>
<wp:comment_author_IP>66.168.55.161</wp:comment_author_IP>
<wp:comment_date>2009-01-15 15:50:33</wp:comment_date>
<wp:comment_date_gmt>2009-01-15 15:50:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks Colin.  I understand the pattern now a bit more.  Keep up the good work!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>3051110</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>16</wp:comment_id>
<wp:comment_author><![CDATA[hugeonion]]></wp:comment_author>
<wp:comment_author_email>chujanen@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://</wp:comment_author_url>
<wp:comment_author_IP>66.168.55.161</wp:comment_author_IP>
<wp:comment_date>2009-01-15 06:32:07</wp:comment_date>
<wp:comment_date_gmt>2009-01-15 06:32:07</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hmmm.  I downloaded the code, built it and ran it but the validation is not working exactly as in your post.  Specifically, the -2 example works, but when I enter 56f for the age, it accepts it without a validation error.   I do have 3.5 SP1 installed if that makes any difference.  Maybe it's just me, but I thought I would let you know.

I can provide some more details if you need too...

--
Christopher]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>3051110</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>17</wp:comment_id>
<wp:comment_author><![CDATA[colineberhardt]]></wp:comment_author>
<wp:comment_author_email>ceberhardt@scottlogic.co.uk</wp:comment_author_email>
<wp:comment_author_url>http://www.scottlogic.co.uk</wp:comment_author_url>
<wp:comment_author_IP>217.23.234.99</wp:comment_author_IP>
<wp:comment_date>2009-01-15 14:00:02</wp:comment_date>
<wp:comment_date_gmt>2009-01-15 14:00:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi,

Thanks very much for bringing this to my attention. I tried the example code again - and funnily enough, it did not work for me either! I wonder what on earth went wrong there?

The problem is easily fixed though - after using BindingGroup.TryGetValue() to retrieve the bound age property, use Int32.TryParse to see whether a valid integer value was input into the text box. If not, throw an exception.

Article and example project have both been updated so should work now. Please let me know if you find any more problems.

Regards,
Colin E.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>5906272</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>rownotcommitted</title>
<link>http://wpfadventures.wordpress.com/?attachment_id=39</link>
<pubDate>Fri, 28 Nov 2008 15:24:51 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/rownotcommitted.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>39</wp:post_id>
<wp:post_date>2008-11-28 15:24:51</wp:post_date>
<wp:post_date_gmt>2008-11-28 15:24:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>rownotcommitted</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>38</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/rownotcommitted.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/rownotcommitted.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"299";s:6:"height";s:3:"299";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/rownotcommitted.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>cellsynchronized</title>
<link>http://wpfadventures.wordpress.com/?attachment_id=40</link>
<pubDate>Fri, 28 Nov 2008 15:36:49 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/cellsynchronized.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>40</wp:post_id>
<wp:post_date>2008-11-28 15:36:49</wp:post_date>
<wp:post_date_gmt>2008-11-28 15:36:49</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>cellsynchronized</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>38</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/cellsynchronized.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/cellsynchronized.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"299";s:6:"height";s:3:"299";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/cellsynchronized.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>wpfdatagridcellbycellcommits</title>
<link>http://wpfadventures.wordpress.com/?attachment_id=41</link>
<pubDate>Fri, 28 Nov 2008 15:37:29 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/wpfdatagridcellbycellcommits.doc</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>41</wp:post_id>
<wp:post_date>2008-11-28 15:37:29</wp:post_date>
<wp:post_date_gmt>2008-11-28 15:37:29</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wpfdatagridcellbycellcommits</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>38</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/wpfdatagridcellbycellcommits.doc</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/wpfdatagridcellbycellcommits.doc</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>wpfrenderandlayouttransforms</title>
<link>http://wpfadventures.wordpress.com/2008/12/19/layouttransform-vs-rendertransform-whats-the-difference/wpfrenderandlayouttransforms/</link>
<pubDate>Mon, 01 Dec 2008 11:12:04 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/wpfrenderandlayouttransforms.doc</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>48</wp:post_id>
<wp:post_date>2008-12-01 11:12:04</wp:post_date>
<wp:post_date_gmt>2008-12-01 11:12:04</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wpfrenderandlayouttransforms</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>46</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/wpfrenderandlayouttransforms.doc</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/wpfrenderandlayouttransforms.doc</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>transforms</title>
<link>http://wpfadventures.wordpress.com/2008/12/19/layouttransform-vs-rendertransform-whats-the-difference/transforms1/</link>
<pubDate>Mon, 01 Dec 2008 11:14:58 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/transforms1.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>49</wp:post_id>
<wp:post_date>2008-12-01 11:14:58</wp:post_date>
<wp:post_date_gmt>2008-12-01 11:14:58</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>transforms1</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>46</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/transforms1.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/transforms1.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"451";s:6:"height";s:3:"351";s:14:"hwstring_small";s:23:"height='96' width='123'";s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/transforms1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>systemcolorchange</title>
<link>http://wpfadventures.wordpress.com/?attachment_id=54</link>
<pubDate>Mon, 01 Dec 2008 13:20:25 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/systemcolorchange.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>54</wp:post_id>
<wp:post_date>2008-12-01 13:20:25</wp:post_date>
<wp:post_date_gmt>2008-12-01 13:20:25</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>systemcolorchange</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>53</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/systemcolorchange.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/systemcolorchange.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"255";s:6:"height";s:3:"260";s:14:"hwstring_small";s:22:"height='96' width='94'";s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/systemcolorchange.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>systemproperty</title>
<link>http://wpfadventures.wordpress.com/?attachment_id=55</link>
<pubDate>Mon, 01 Dec 2008 13:20:27 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/systemproperty.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>55</wp:post_id>
<wp:post_date>2008-12-01 13:20:27</wp:post_date>
<wp:post_date_gmt>2008-12-01 13:20:27</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>systemproperty</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>53</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/systemproperty.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/systemproperty.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"383";s:6:"height";s:3:"411";s:14:"hwstring_small";s:22:"height='96' width='89'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/systemproperty.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>highlightedrowstyle</title>
<link>http://wpfadventures.wordpress.com/?attachment_id=56</link>
<pubDate>Mon, 01 Dec 2008 13:25:30 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/highlightedrowstyle.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>56</wp:post_id>
<wp:post_date>2008-12-01 13:25:30</wp:post_date>
<wp:post_date_gmt>2008-12-01 13:25:30</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>highlightedrowstyle</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>53</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/highlightedrowstyle.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/highlightedrowstyle.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"299";s:6:"height";s:3:"299";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/highlightedrowstyle.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>dgvisualtree</title>
<link>http://wpfadventures.wordpress.com/2008/12/02/wpf-datagrid-detecting-clicked-cell-and-row/dgvisualtree/</link>
<pubDate>Tue, 02 Dec 2008 14:02:56 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/dgvisualtree.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>60</wp:post_id>
<wp:post_date>2008-12-02 14:02:56</wp:post_date>
<wp:post_date_gmt>2008-12-02 14:02:56</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>dgvisualtree</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>59</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/dgvisualtree.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/dgvisualtree.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"532";s:6:"height";s:3:"507";s:14:"hwstring_small";s:23:"height='96' width='100'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/dgvisualtree.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>clickedvalue</title>
<link>http://wpfadventures.wordpress.com/2008/12/02/wpf-datagrid-detecting-clicked-cell-and-row/clickedvalue/</link>
<pubDate>Tue, 02 Dec 2008 14:48:34 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/clickedvalue.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>61</wp:post_id>
<wp:post_date>2008-12-02 14:48:34</wp:post_date>
<wp:post_date_gmt>2008-12-02 14:48:34</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>clickedvalue</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>59</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/clickedvalue.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/clickedvalue.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"299";s:6:"height";s:3:"299";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/clickedvalue.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>wpfdatagridmouseclicks</title>
<link>http://wpfadventures.wordpress.com/2008/12/02/wpf-datagrid-detecting-clicked-cell-and-row/wpfdatagridmouseclicks/</link>
<pubDate>Tue, 02 Dec 2008 14:49:13 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/wpfdatagridmouseclicks.doc</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>62</wp:post_id>
<wp:post_date>2008-12-02 14:49:13</wp:post_date>
<wp:post_date_gmt>2008-12-02 14:49:13</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wpfdatagridmouseclicks</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>59</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/wpfdatagridmouseclicks.doc</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/wpfdatagridmouseclicks.doc</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>WPF DataGrid - detecting the column, cell and row that has been clicked</title>
<link>http://wpfadventures.wordpress.com/2008/12/02/wpf-datagrid-detecting-clicked-cell-and-row/</link>
<pubDate>Tue, 02 Dec 2008 17:00:47 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[DataGrid]]></category>

		<category domain="tag" nicename="datagrid"><![CDATA[DataGrid]]></category>

		<category domain="tag"><![CDATA[WPF]]></category>

		<category domain="tag" nicename="wpf"><![CDATA[WPF]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=59</guid>
<description></description>
<content:encoded><![CDATA[The WPF DataGrid is a very flexible tool, however in its current state certain simple tasks can prove to be rather tricky. A fairly common task when working with DataGrid is detecting which row, or cell a user has clicked on, or whether they clicked a column header. You might expect this information to be readily available in the form of events, after all, the Windows Forms DataGridView has <a href="msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.cellclick.aspx">CellClicked</a> and <a href="msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.columnheadermouseclick.aspx">ColumnHeaderMouseClick</a> events (among many others). However, sadly this is not the case. In order to implement this behaviour you have to understand the visual tree of the DataGrid and how it can be navigated.

Let's say for example you wanted to find the DataGrid item (cell, row, header) that was clicked when the right mouse button is released. Firstly, we add an event handler for the mouse click in our code-behind:

XAML:
<pre>&lt;dg:DataGrid Name="DataGrid"
             MouseRightButtonUp="DataGrid_MouseRightButtonUp"/&gt;</pre>
C#:
<pre>private void DataGrid_MouseRightButtonUp(object sender,
                                        MouseButtonEventArgs e)
{
}</pre>
The above event is a 'bubbling' event, which means that it it started on the element that was originally clicked (for example a TextBlock which renders the cell's value within a DataGridCell), then bubbled up the logical tree until it reaches our event handler in the Window. The e.OriginalSource property gives us access to the element that initiated this event.

The problem is that while we have access to the lement which was clicked on, this element is part of the control or data template of the element that we are really interested, the cell or header. The WPF rich-content model means that our cells could contain all sorts of visual element, therefore we have no way of guessing exactly what e.OriginalSource will be. However, the one thing of which we can be certain is that this element is a child of the element which we are interested in.

If you place a bearkpoint within yoru event handler, you can then use the excellent <a href="http://karlshifflett.wordpress.com/mole-for-visual-studio/">Mole</a> debug visualiser to locate the clicked element within the visual tree as illustrated below:

<a href="http://wpfadventures.files.wordpress.com/2008/12/dgvisualtree.png"><img class="alignnone size-full wp-image-60" title="dgvisualtree" src="http://wpfadventures.files.wordpress.com/2008/12/dgvisualtree.png" alt="dgvisualtree" width="450" height="428" /></a>

As you can see, the visual tree is a complex beast! I have highlighted the items of interest:
<ol>
	<li>The <strong>TextBlock</strong>, which is the element I clicked on, which is e.OriginalSource parameter.</li>
	<li>The <strong>DataGridCell</strong>, the cell which was clicked on.</li>
	<li>The <strong>DataGridRow </strong>which the cell belongs to.</li>
	<li>And finally, the <strong>DataGrid</strong>.</li>
</ol>
Therefore, in order to locate the cell and row that was clicked on we must navigate up the Visual Tree, searching by type:
<pre>private void DataGrid_MouseRightButtonUp(object sender,
                                                  MouseButtonEventArgs e)
{
    DependencyObject dep = (DependencyObject)e.OriginalSource;

    // iteratively traverse the visual tree
    while ((dep != null) &amp;&amp;
            !(dep is DataGridCell) &amp;&amp;
            !(dep is DataGridColumnHeader))
    {
        dep = VisualTreeHelper.GetParent(dep);
    }

    if (dep == null)
        return;

    if (dep is DataGridColumnHeader)
    {
        DataGridColumnHeader columnHeader = dep as DataGridColumnHeader;
        // do something
    }

    if (dep is DataGridCell)
    {
        DataGridCell cell = dep as DataGridCell;
        // do something
    }
}</pre>
Fantastic, we have now have our header and cell. All that's left to do is extract the cell's row and column indices, and cell value. Wait a minute ... where are the cell.RowIndex and cell.ColumnIndex properties? It looks like there's more work to be done.

Once we have navigated up the tree to the DataGridCell, we can continue our journey upwards to obtain the DataGridRow:
<pre>if (dep is DataGridCell)
{
    DataGridCell cell = dep as DataGridCell;

    // navigate further up the tree
    while ((dep != null) &amp;&amp; !(dep is DataGridRow))
    {
        dep = VisualTreeHelper.GetParent(dep);
    }

    DataGridRow row = dep as DataGridRow;
}</pre>
Does the DataGridRow have a RowIndex property? I think you can guess the answer to that question.

The DataGrid is an <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a> - WPF users are probably most familiar with the ListView which is also an ItemsControl whcih has a number of similarities with the DataGrid. In the ItemsControl terminology, the DataGridRow is an ItemContainer and the DataGrid has an ItemContainerGenerator associated with it for generating the rows. I don't want to go into the details of how ItemContainers work, Dr. WPF has a good <a href="http://www.drwpf.com/blog/ItemsControlSeries/tabid/59/Default.aspx">series on the ItemsControl</a> for those who are interested. The following code can be used to determine the index of a row:
<pre>private int FindRowIndex(DataGridRow row)
{
    DataGrid dataGrid =
        ItemsControl.ItemsControlFromItemContainer(row)
        as DataGrid;

    int index = dataGrid.ItemContainerGenerator.
        IndexFromContainer(row);

    return index;
}</pre>
Now that we have the row index, the column index is thankfully a little easier to locate, cell.Column.DisplayIndex does the trick. The final piece of information which we might like is the cell value. Is there a cell.Value properly? don't make me laugh!

The following method determines the property binding for the cells column, then extracts the value from the data items associated with the row:
<pre>private object ExtractBoundValue(DataGridRow row,
                                 DataGridCell cell)
{
    // find the column that this cell belongs to
    DataGridBoundColumn col =
       cell.Column as DataGridBoundColumn;

    // find the property that this column is bound to
    Binding binding = col.Binding as Binding;
    string boundPropertyName = binding.Path.Path;

    // find the object that is related to this row
    object data = row.Item;

    // extract the property value
    PropertyDescriptorCollection properties =
        TypeDescriptor.GetProperties(data);

    PropertyDescriptor property = properties[boundPropertyName];
    object value = property.GetValue(data);

    return value;
}</pre>
Putting it all together, this blog post has a small smaple application which displays the header index and value, or cell's row/column indices and value in response to a right mouse click:

<a href="http://wpfadventures.files.wordpress.com/2008/12/clickedvalue.png"><img class="alignnone size-full wp-image-61" title="clickedvalue" src="http://wpfadventures.files.wordpress.com/2008/12/clickedvalue.png" alt="clickedvalue" width="299" height="299" /></a>

The sample project can be download, <a href="http://wpfadventures.files.wordpress.com/2008/12/wpfdatagridmouseclicks.doc">wpfdatagridmouseclicks</a>, changing the file extension from .doc to .zip.

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>59</wp:post_id>
<wp:post_date>2008-12-02 17:00:47</wp:post_date>
<wp:post_date_gmt>2008-12-02 17:00:47</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wpf-datagrid-detecting-clicked-cell-and-row</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1231317534</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_old_slug</wp:meta_key>
<wp:meta_value>wpf-datagrid-detecting-the-column-cell-and-row-that-has-been-clicked</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>10</wp:comment_id>
<wp:comment_author><![CDATA[sreeraj]]></wp:comment_author>
<wp:comment_author_email>sreerajrs@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>203.200.142.84</wp:comment_author_IP>
<wp:comment_date>2009-01-07 07:36:30</wp:comment_date>
<wp:comment_date_gmt>2009-01-07 07:36:30</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Very use ful article . I was on research in this for past few days . To get the controls inside datatemplate in a grid cell, i think we can use this way 
ContentPresenter objPresent = Mygrid.Columns[ColumnNumber].GetCellContent(e.Row) as ContentPresenter;

 DependencyObject objdep = objPresent.ContentTemplate.LoadContent();
from this dependancy object , we can access the control]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>wasabi</title>
<link>http://wpfadventures.wordpress.com/2008/12/04/awards-and-other-news/wasabi/</link>
<pubDate>Thu, 04 Dec 2008 14:29:55 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/wasabi.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>70</wp:post_id>
<wp:post_date>2008-12-04 14:29:55</wp:post_date>
<wp:post_date_gmt>2008-12-04 14:29:55</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wasabi</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>69</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/wasabi.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/wasabi.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"250";s:6:"height";s:3:"267";s:14:"hwstring_small";s:22:"height='96' width='89'";s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/wasabi.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Awards and other news</title>
<link>http://wpfadventures.wordpress.com/2008/12/04/awards-and-other-news/</link>
<pubDate>Thu, 04 Dec 2008 14:35:12 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[Awards]]></category>

		<category domain="tag" nicename="awards"><![CDATA[Awards]]></category>

		<category domain="tag"><![CDATA[News]]></category>

		<category domain="tag" nicename="news"><![CDATA[News]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=69</guid>
<description></description>
<content:encoded><![CDATA[A couple of days ago I was happy to hear that I am a prizewinner in the <a href="http://www.community-credit.com">Community Credit awards</a> for November 2008. Community Credit encourages developers to contribute to the global developer community by writing articles, giving talks, participating on forums etc... Top contributors are rewarded with 'stupid prizes',  I will shortly be receiving my certificate and some Wasabi flavoured gumballs:

<a href="http://wpfadventures.files.wordpress.com/2008/12/wasabi.jpg"><img class="aligncenter size-full wp-image-70" title="wasabi" src="http://wpfadventures.files.wordpress.com/2008/12/wasabi.jpg" alt="wasabi" width="250" height="267" /></a>

I have also, just yesterday, been accepted into the <a href="http://groups.google.com/group/wpf-disciples/">WPF Disciples Group</a>. A small group of WPF enthusiasts who 'move the world forward' - a grand and noble tagline!

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>69</wp:post_id>
<wp:post_date>2008-12-04 14:35:12</wp:post_date>
<wp:post_date_gmt>2008-12-04 14:35:12</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>awards-and-other-news</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1228407190</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>6</wp:comment_id>
<wp:comment_author><![CDATA[Peter]]></wp:comment_author>
<wp:comment_author_email>burrell_peter@bah.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>156.80.102.113</wp:comment_author_IP>
<wp:comment_date>2008-12-04 15:26:59</wp:comment_date>
<wp:comment_date_gmt>2008-12-04 15:26:59</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Congratulations! Your articles on CodeProject have been top-notch.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>7</wp:comment_id>
<wp:comment_author><![CDATA[colineberhardt]]></wp:comment_author>
<wp:comment_author_email>ceberhardt@scottlogic.co.uk</wp:comment_author_email>
<wp:comment_author_url>http://www.scottlogic.co.uk</wp:comment_author_url>
<wp:comment_author_IP>217.23.234.99</wp:comment_author_IP>
<wp:comment_date>2008-12-04 16:42:44</wp:comment_date>
<wp:comment_date_gmt>2008-12-04 16:42:44</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Many thanks Peter.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>5906272</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>8</wp:comment_id>
<wp:comment_author><![CDATA[Josh Smith]]></wp:comment_author>
<wp:comment_author_email>flapplejacks@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://joshsmithonwpf.wordpress.com/</wp:comment_author_url>
<wp:comment_author_IP>207.38.231.5</wp:comment_author_IP>
<wp:comment_date>2008-12-09 13:13:55</wp:comment_date>
<wp:comment_date_gmt>2008-12-09 13:13:55</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice gumballs!  :D]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>758612</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>9</wp:comment_id>
<wp:comment_author><![CDATA[colineberhardt]]></wp:comment_author>
<wp:comment_author_email>ceberhardt@scottlogic.co.uk</wp:comment_author_email>
<wp:comment_author_url>http://www.scottlogic.co.uk</wp:comment_author_url>
<wp:comment_author_IP>212.183.136.193</wp:comment_author_IP>
<wp:comment_date>2008-12-09 15:29:06</wp:comment_date>
<wp:comment_date_gmt>2008-12-09 15:29:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks Josh - if you are ever in the Newcastle area I'll let you have one! ;-)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>8</wp:comment_parent>
<wp:comment_user_id>5906272</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>wpf-banner</title>
<link>http://wpfadventures.wordpress.com/2008/12/04/awards-and-other-news/wpf-banner/</link>
<pubDate>Thu, 04 Dec 2008 14:42:20 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/12/wpf-banner.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>72</wp:post_id>
<wp:post_date>2008-12-04 14:42:20</wp:post_date>
<wp:post_date_gmt>2008-12-04 14:42:20</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wpf-banner</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>69</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/12/wpf-banner.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/wpf-banner.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";s:3:"174";s:6:"height";s:3:"174";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/12/wpf-banner.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>LayoutTransform vs. RenderTransform - What's the Difference?</title>
<link>http://wpfadventures.wordpress.com/2008/12/19/layouttransform-vs-rendertransform-whats-the-difference/</link>
<pubDate>Fri, 19 Dec 2008 05:45:42 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[layout]]></category>

		<category domain="tag" nicename="layout"><![CDATA[layout]]></category>

		<category domain="tag"><![CDATA[WPF]]></category>

		<category domain="tag" nicename="wpf"><![CDATA[WPF]]></category>

<guid isPermaLink="false">http://wpfadventures.wordpress.com/?p=46</guid>
<description></description>
<content:encoded><![CDATA[I have answered a few forum posts about the WPF transforms recently, mostly regarding confusion between <a href="http://msdn.microsoft.com/en-us/library/system.windows.uielement.rendertransform.aspx">RenderTransform</a> and <a href="http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.layouttransform.aspx">LayoutTransform</a>. This brief blog post illustrates the difference between the two.  The WPF <a href="http://msdn.microsoft.com/en-us/library/ms745058.aspx">layout system</a> comprises, of two steps, followed by the rendering of the user interface (UI):
<ul>
	<li>Measure</li>
	<li>Arrange</li>
	<li>Render</li>
</ul>
In the Measure step, the DesiredSize of each element is computed; in the Arrange step the position of child elements within their parents is determined; finally, in the Render step, the result user interface is rendered to the screen.  Layout transforms and Render transforms are computed at different stages of the layout/render process:
<ul>
	<li><strong>LayoutTransform</strong></li>
	<li>Measure</li>
	<li>Arrange</li>
	<li><strong>RenderTransform</strong></li>
	<li>Render</li>
</ul>
As a result, any transformations associated with an elements LayoutTransform property will have an impact on the subsequent Measure and Arrange steps. Whereas a RenderTransform will not have any impact on the layout process and will only effect rendering.  The difference is probably best illustrated by an example:

<a href="http://wpfadventures.files.wordpress.com/2008/12/transforms.png"></a><a href="http://wpfadventures.files.wordpress.com/2008/12/transforms1.png"><img class="alignnone size-full wp-image-49" title="transforms" src="http://wpfadventures.files.wordpress.com/2008/12/transforms1.png" alt="transforms" width="440" height="350" /></a>

In the above examples, it can be seen that when a LayoutTransform is applied, neighbouring elements are re-positioned to accommodate the transformed elements, whereas with the RenderTransform they are not. One common use of WPF transforms is to rotate ListView column headings. With the above examples it should be obvious that a LayoutTransform is required to achieve this effect.

You can download the demo project, <a href="http://wpfadventures.files.wordpress.com/2008/12/wpfrenderandlayouttransforms.doc">wpfrenderandlayouttransforms</a>, changing the file extension from .doc to .zip.

Regards, Colin E.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>46</wp:post_id>
<wp:post_date>2008-12-19 05:45:42</wp:post_date>
<wp:post_date_gmt>2008-12-19 05:45:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>layouttransform-vs-rendertransform-whats-the-difference</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1229666030</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>5906272</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>bindinggroupvalidation1</title>
<link>http://wpfadventures.wordpress.com/2008/11/28/using-bindinggroups-for-greater-control-over-input-validation/bindinggroupvalidation1/</link>
<pubDate>Thu, 15 Jan 2009 13:54:51 +0000</pubDate>
<dc:creator><![CDATA[colineberhardt]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://wpfadventures.files.wordpress.com/2008/11/bindinggroupvalidation1.doc</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>78</wp:post_id>
<wp:post_date>2009-01-15 13:54:51</wp:post_date>
<wp:post_date_gmt>2009-01-15 13:54:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>bindinggroupvalidation1</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>31</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://wpfadventures.wordpress.com/files/2008/11/bindinggroupvalidation1.doc</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/wpcom/public_html/wp-content/blogs.dir/cd3/5655239/files/2008/11/bindinggroupvalidation1.doc</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
</channel>
</rss>
